apply plugin: "java"

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_16

sourceSets.main {
    java.srcDirs = ["src"]
    resources.srcDirs = ["assets"]
}

ext {
    //the build number that this mod is made for
    mindustryVersion = 'v145'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

    modCore = {String name ->
        if(name.startsWith(":")) {
            name = name.substring(1);
        }

        return "com.github.MindustryExtended13.Me13Core:$name:389ce0eb25"
    }
}

//java 8 backwards compatibility flag
allprojects {
    group = "io.TheEE145.MaterialEnergy2"
    version '1.0'

    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceSets.main {
        java.srcDirs = ["src"]
        resources.srcDirs = []
    }

    sourceCompatibility = 1.8 // java 8
    targetCompatibility = 1.8

    //jitpack modules publish (for example core, integration)
    //you can remove this if need to remove
    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
            }
        }
    }
}

allprojects {
    apply plugin: "java"

    sourceSets.test {
        java.srcDirs = []
        resources.srcDirs = []
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://maven.xpdustry.com/anuken'
        }
        maven {
            url 'https://www.jitpack.io'
        }
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:23.0.0'
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs.addAll(['--release', '8'])
        }
    }

    //force arc version
    configurations.configureEach {
        resolutionStrategy.eachDependency { details ->
            if(details.requested.group == 'com.github.Anuken.Arc') {
                details.useVersion "$mindustryVersion"
            }
        }
    }
}

dependencies {
    //main components
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"
    compileOnly 'org.jetbrains:annotations:23.0.0'
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"

    //core & integration (not optimal and core, integration module can be removed)
    implementation project(":core")
    implementation project(":integration")

    //ME13 components
    implementation modCore(":block")
    implementation modCore(":logger")
    implementation modCore(":items")
    implementation modCore(":text-draw")
    implementation modCore(":multicraft")
    implementation modCore(":bundle2")

    //LogicFix integration
    implementation "com.github.MindustryExtended13.LogicFix:core:0679d2f285"
}

//force arc version
configurations.all {
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException(
                "No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory."
        );

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{
            f -> new File(f, "android.jar").exists()
        }

        if(!platformRoot) throw new GradleException(
                "No android.jar found. Ensure that you have an Android platform installed."
        )


        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() +
                configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{
            "--classpath $it.path"}.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "$sdkRoot/build-tools/30.0.3/d8.bat $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    var prop = gradle.startParameter.projectProperties
    String asString = null

    if(prop.containsKey('ex')) {
        asString = "${archivesBaseName}Desktop.${prop.get('ex')}"
    } else {
        println('Using default file exception (jar)')
        asString = "${archivesBaseName}Desktop.jar"
    }

    archiveFileName = asString

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(rootDir) {
        include "mod.json"
        include "icon.png"
    }

    doLast {
        if(prop.containsKey('path')) {
            copy {
                println("Copy file ${asString} to destonation")
                from layout.buildDirectory.file("libs/$asString")
                into layout.buildDirectory.dir(prop.get('path'))
            }
        }

        if(prop.containsKey('m')) {
            exec {
                commandLine 'cmd', '/c', "\"${prop.get('m')}\""
            }
        }
    }
}

task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

project(":core") {
    dependencies {
        implementation modCore(":block")
        implementation modCore(":logger")
        implementation modCore(":items")
        implementation modCore(":text-draw")
        implementation modCore(":multicraft")
        implementation rootProject.project(":integration")
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"
    }
}

project(":integration") {
    dependencies {
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"
    }
}